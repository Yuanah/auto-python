# _*_ coding: utf-8 _*_# -*- coding: utf-8 -*-#auto：yuan.ah#QQ:408344252import re,os,gc,timedef Read_Log(fdir):                                          #遍历目录读取txt文件内容，输出temp.txt    flist = os.listdir(fdir)  # 获取目录下文件名    lines = []    for flog in flist:           #遍历文件夹        if not os.path.isdir(flog) and os.path.splitext(flog)[1]==".txt":            f = open(fdir + flog, 'r')  # 依次读取每个日志文件            a = f.readlines()            lines.append(a)            print 'Reading Log:%s' % (fdir + flog)    for i in lines:        for j in i:            with open('temp.txt', 'a+') as log:                counts = j + "\n"                log.write(counts)    delblankline("temp.txt", "temp_delblankline.txt")    del_same("temp_delblankline.txt")def delblankline(infile, outfile):         #删除文本空白行    infopen = open(infile, 'r')    outfopen = open(outfile, 'w')    lines = infopen.readlines()    for line in lines:        if line.split():            outfopen.writelines(line)        else:            outfopen.writelines("")    infopen.close()    outfopen.close()def del_same(infile):                         #删除文本重复行，输出去除重复行后的结果文件    outfile = open('temp_delsame.txt', 'w') #新的文件    list_1=[]    for line in open(infile, 'r'):  #老文件        tmp = line.strip()        if tmp not in list_1:            list_1.append(tmp)            outfile.write(line)    outfile.close()def log_Note(acl):                          #追加记录log文件    with open('acl.txt','a+') as log:        counts = acl +"\n"        log.write(counts)if __name__ == '__main__':    startTime = time.clock()    gc.disable()    fdir='C:\\Users\\think\\mystuff\\2017-05-07\\session\\'    protocol_tcp = [['ssh'],['sqlnet'],['http'],['https'],['ftp'],['rpc'],['ils'],['netbios-name']]    protocol_udp = [['dns'],['syslog'],['ntp'],['snmp'],['sip']]    protocol_all = []    sourIP = []    destIP = []    destPort = []    find_IP = re.compile('(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')    find_destPort = re.compile('\:(\d{1,5})')    find_protocol = re.compile(r'tcp|udp|ssh|sqlnet|http|https|dns|ftp|icmp|syslog|ntp|snmp|rpc|ils|netbios-name|sip')    Read_Log(fdir)    f = open('temp_delsame.txt')    lines = f.readlines()    for line in lines :        if 'VPN:public --> public' in line :            (protocol_info,sourIP_info,destIP_info) = line.split('->', 2)            if '[' in sourIP_info:                (sourIP_info_before,sourIP_info_after) = sourIP_info.split('[', 1)                sour_IP = find_IP.findall(sourIP_info_before)            else:                sour_IP = find_IP.findall(sourIP_info)            if '[' in destIP_info:                (destIP_info_before, destIP_info_after) = destIP_info.split('[', 1)                dest_IP = find_IP.findall(destIP_info_after)                dest_Port = find_destPort.findall(destIP_info_after)            else:                dest_IP = find_IP.findall(destIP_info)                dest_Port = find_destPort.findall(destIP_info)            protocol = find_protocol.findall(protocol_info)            if 'VPN:public' in protocol_info:                protocol_all.append(protocol)                sourIP.append(sour_IP)                destIP.append(dest_IP)                destPort.append(dest_Port)            for one in range(len(protocol_all)):                if protocol_all[one] in protocol_tcp:                    protocol_all[one] = ['tcp']                elif protocol_all[one] in protocol_udp:                    protocol_all[one] = ['udp']                else:                    pass    for i in range(len(sourIP)):        a = protocol_all[i] + sourIP[i] + destIP[i] + destPort[i]        protocol_str = "".join(tuple(protocol_all[i]))        sourIP_str = "".join(tuple(sourIP[i]))        destIP_str = "".join(tuple(destIP[i]))        destPort_str = "".join(tuple(destPort[i]))        acl = protocol_str + " " + sourIP_str + " " + destIP_str + " " + destPort_str        log_Note(acl)    f.close()    os.remove('temp.txt')    os.remove('temp_delblankline.txt')    os.remove('temp_delsame.txt')    gc.enable()    print 'Done! Cost Time: %0.2f second' % (time.clock() - startTime)